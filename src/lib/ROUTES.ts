/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/sign-in": `/sign-in`,
  "/sign-up": `/sign-up`,
  "/verify": `/verify`,
  "/[handle=handle]/[twiddleId]": (params: { handle: (Parameters<typeof import('../params/handle.ts').match>[0]), twiddleId: (string | number) }) => {
    return `/${params.handle}/${params.twiddleId}`
  },
  "/[handle=handle]/activity": (params: { handle: (Parameters<typeof import('../params/handle.ts').match>[0]) }) => {
    return `/${params.handle}/activity`
  },
  "/[handle=handle]/liked": (params: { handle: (Parameters<typeof import('../params/handle.ts').match>[0]) }) => {
    return `/${params.handle}/liked`
  },
  "/settings": `/settings`,
  "/settings/interface": `/settings/interface`,
  "/settings/privacy": `/settings/privacy`,
  "/admin/settings": `/admin/settings`,
  "/admin/users": `/admin/users`
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /.well-known/security.txt": `/.well-known/security.txt`,
  "GET /robots.txt": `/robots.txt`,
  "GET /sitemap.xml": `/sitemap.xml`,
  "GET /api/v1/admin/users/[id]/restrict": (params: { id: (string | number) }) => {
    return `/api/v1/admin/users/${params.id}/restrict`
  },
  "GET /api/v1/admin/users/[id]/unrestrict": (params: { id: (string | number) }) => {
    return `/api/v1/admin/users/${params.id}/unrestrict`
  },
  "GET /api/v1/deleteAccounts": `/api/v1/deleteAccounts`,
  "POST /api/v1/profile/[handle]/follow": (params: { handle: (string | number) }) => {
    return `/api/v1/profile/${params.handle}/follow`
  },
  "DELETE /api/v1/profile/[handle]/follow": (params: { handle: (string | number) }) => {
    return `/api/v1/profile/${params.handle}/follow`
  },
  "GET /api/v1/retrievePersonalInfo": `/api/v1/retrievePersonalInfo`,
  "POST /api/v1/twiddle/[id]/delete": (params: { id: (string | number) }) => {
    return `/api/v1/twiddle/${params.id}/delete`
  },
  "POST /api/v1/twiddle/[id]/like": (params: { id: (string | number) }) => {
    return `/api/v1/twiddle/${params.id}/like`
  },
  "POST /api/v1/twiddle/[id]/unlike": (params: { id: (string | number) }) => {
    return `/api/v1/twiddle/${params.id}/unlike`
  }
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "setSiteSettings /admin/settings": `/admin/settings?/setSiteSettings`,
  "signIn /actions/v1/auth": `/actions/v1/auth?/signIn`,
  "signUp /actions/v1/auth": `/actions/v1/auth?/signUp`,
  "signOut /actions/v1/auth": `/actions/v1/auth?/signOut`,
  "otpVerification /actions/v1/auth": `/actions/v1/auth?/otpVerification`,
  "sendOtpEmail /actions/v1/auth": `/actions/v1/auth?/sendOtpEmail`,
  "deleteAccount /actions/v1/auth": `/actions/v1/auth?/deleteAccount`,
  "setProfile /actions/v1/profile": `/actions/v1/profile?/setProfile`,
  "setPrivacySettings /actions/v1/settings": `/actions/v1/settings?/setPrivacySettings`,
  "setInterfaceSettings /actions/v1/settings": `/actions/v1/settings?/setInterfaceSettings`,
  "setTwiddle /actions/v1/twiddle": `/actions/v1/twiddle?/setTwiddle`
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  for (const [name, val] of Object.entries(sp)) {
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted) {
    return `${prefix}${formatted}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/sign-in': never, '/sign-up': never, '/verify': never, '/[handle=handle]/[twiddleId]': 'handle' | 'twiddleId', '/[handle=handle]/activity': 'handle', '/[handle=handle]/liked': 'handle', '/settings': never, '/settings/interface': never, '/settings/privacy': never, '/admin/settings': never, '/admin/users': never }
  SERVERS: { 'GET /.well-known/security.txt': never, 'GET /robots.txt': never, 'GET /sitemap.xml': never, 'GET /api/v1/admin/users/[id]/restrict': 'id', 'GET /api/v1/admin/users/[id]/unrestrict': 'id', 'GET /api/v1/deleteAccounts': never, 'POST /api/v1/profile/[handle]/follow': 'handle', 'DELETE /api/v1/profile/[handle]/follow': 'handle', 'GET /api/v1/retrievePersonalInfo': never, 'POST /api/v1/twiddle/[id]/delete': 'id', 'POST /api/v1/twiddle/[id]/like': 'id', 'POST /api/v1/twiddle/[id]/unlike': 'id' }
  ACTIONS: { 'setSiteSettings /admin/settings': never, 'signIn /actions/v1/auth': never, 'signUp /actions/v1/auth': never, 'signOut /actions/v1/auth': never, 'otpVerification /actions/v1/auth': never, 'sendOtpEmail /actions/v1/auth': never, 'deleteAccount /actions/v1/auth': never, 'setProfile /actions/v1/profile': never, 'setPrivacySettings /actions/v1/settings': never, 'setInterfaceSettings /actions/v1/settings': never, 'setTwiddle /actions/v1/twiddle': never }
  LINKS: Record<string, never>
  Params: { handle: never, twiddleId: never, id: never }
}
